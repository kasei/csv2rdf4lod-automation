#!/bin/bash
#
# Virtuoso			Bulk Loader Script
#
# Author: Shangguan (http://www.cs.rpi.edu/~shangz, shangz@cs.rpi.edu)
# Contributor: Tim Lebo (http://tw.rpi.edu/instances/TimLebo)
# Version: 1.1
# Date: May 27, 2011
# Description: Bulk loader script for Virtuoso
# Usage: vload [rdf|ttl|nt|nq] [data_file] [graph_uri]
# See http://docs.openlinksw.com/virtuoso/fn_ttlp_mt.html

# Virtuoso can read from directories listed in 'DirsAllowed' 
# in /opt/virtuoso/var/lib/virtuoso/db/virtuoso.ini
virtuoso_allowed_dir="${CSV2RDF4LOD_HOME}/tmp/vload-tmp/input-files"
if [ ! -d $virtuoso_allowed_dir ]; then
   mkdir -p $virtuoso_allowed_dir
   chmod a+w $virtuoso_allowed_dir
fi

#
# Check usage
if [ $# -ne 3 ]; then
	echo "usage: `basename $0` {rdf, ttl, nt, nq} <data_file> [--replace] <graph_uri>"
   exit 1
fi

input_format="$1"
data_file="$2"

replace="no"
operation="Loading"
if [ $3 == "--replace" ]; then
	replace="yes"
	operation="Replacing"
	shift
fi

graph_uri="$3"

# Check if file exists
if [ ! -e $data_file ]; then
   echo "Data file doesn't exist: $data_file"
   exit 1
fi

echo "${operation} triples into graph <$graph_uri> ..."

# Check to see if file is within a directory Virtuoso can read from directly.
load_in_place="false"
if [[ ${#CSV2RDF4LOD_CONVERT_DATA_ROOT} > 1 ]]; then
   if [[ $data_file =~ $CSV2RDF4LOD_CONVERT_DATA_ROOT.* ]]; then
      load_in_place="true"
   elif [[ -e `pwd`/$data_file && `pwd` =~ $CSV2RDF4LOD_CONVERT_DATA_ROOT.* ]]; then
      # data_file was a local name, but working directory is virtuoso-readable.
      load_in_place="true"
      data_file=`pwd`/$data_file
   fi
fi

if [[ $load_in_place == "false" ]]; then
   # Copy file to Virtuoso allowed directory
   cp ${data_file} ${virtuoso_allowed_dir}
   file_name_local=${data_file##*/}
   file_name_full=$virtuoso_allowed_dir/$file_name_local
   echo COPYING ${data_file} $file_name_full
else
   echo "no need to copy: $data_file is within virtuoso-readable directory: $CSV2RDF4LOD_CONVERT_DATA_ROOT"
   file_name_full=$data_file
fi

# Log into Virtuoso isql env
# USERNAME and PASSWORD (see http://docs.openlinksw.com/virtuoso/isql.html)
virt_home=${CSV2RDF4LOD_PUBLISH_VIRTUOSO_HOME:-"/opt/virtuoso"}
isql_cmd="${CSV2RDF4LOD_PUBLISH_VIRTUOSO_ISQL_PATH:-"$virt_home/bin/isql"} ${CSV2RDF4LOD_PUBLISH_VIRTUOSO_PORT:-"1111"} ${CSV2RDF4LOD_PUBLISH_VIRTUOSO_USERNAME:-"dba"}"
isql_pwd="${CSV2RDF4LOD_PUBLISH_VIRTUOSO_PASSWORD:-"dba"}"  # default admin password, may neeed to change

# Call Virtuoso loading functions for different input formats
load_func=""
case "$input_format" in
   "rdf")
   load_func="DB.DBA.RDF_LOAD_RDFXML_MT(file_to_string_output('$file_name_full'), '', '$graph_uri', 2, $CSV2RDF4LOD_CONCURRENCY);"
   # echo $load_func
   ;;
   "ttl")
   load_func="DB.DBA.TTLP_MT(file_to_string_output('$file_name_full'),'','$graph_uri', 255, 2, $CSV2RDF4LOD_CONCURRENCY);"
   # echo $load_func
   ;;
   "nt")
   load_func="DB.DBA.TTLP_MT(file_to_string_output('$file_name_full'),'','$graph_uri', 255, 2, $CSV2RDF4LOD_CONCURRENCY);"
   # echo $load_func
   ;;
   "nq")
   load_func="DB.DBA.TTLP_MT(file_to_string_output('$file_name_full'),'','$graph_uri', 512, 2, $CSV2RDF4LOD_CONCURRENCY);"
   # echo $load_func
   ;;
   *)
   echo "Input format unacceptable"
   echo
   echo "		Acceptable input formats"
   echo "		1) rdf -- RDF/XML"
   echo "		2) ttl -- Turtle/N3"
   echo "		3) nt -- n-triple"
   echo "		4) nq -- n-quad"
   exit 0
   ;;
esac

vload_log=$virtuoso_allowed_dir/load_`${CSV2RDF4LOD_HOME}/bin/util/dateInXSDDateTime.sh coin:slug`_$$.log

sparql_delete=""
if [ $replace == "yes" ]; then
	sparql_delete="SPARQL CLEAR GRAPH <$graph_uri>;"
fi

${isql_cmd} ${isql_pwd} << EOF &> $vload_log
   $sparql_delete
   $load_func
   checkpoint;
   exit;
EOF
echo ""                                                            >> $vload_log
echo "# user: `whoami`"                                            >> $vload_log
echo "# time: `${CSV2RDF4LOD_HOME}/bin/util/dateInXSDDateTime.sh`" >> $vload_log

# Move the latest.log pointer to the log we just created.
rm $virtuoso_allowed_dir/latest.log &> /dev/null
ln -s $vload_log $virtuoso_allowed_dir/latest.log

if [[ $load_in_place == "false" ]]; then
   # Remove temp file
   rm $file_name_full
fi

# TODO: cat file if it contains /^... Error/
if [ ${CSV2RDF4LOD_CONVERT_DEBUG_LEVEL:-"."} == "finest" ]; then
   echo "${operation} finished! $vload_log:"	
   cat $vload_log
else
   echo "${operation} finished! Check $virtuoso_allowed_dir/latest.log for details."	
fi
